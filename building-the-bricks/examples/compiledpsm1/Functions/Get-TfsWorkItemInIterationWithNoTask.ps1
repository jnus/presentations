function Get-TfsWorkItemInIterationWithNoTask
{
    <#
        .SYNOPSIS
            This function gets any work items in the specified Iteration with no tasks linked

        .DESCRIPTION
            This function gets any work items which have no tasks linked to them in the specified iteration.
            It will query TFS for all the tasks in the specified Iteration path with the specified states, 
            and then iterate over them to find which ones are root items, which are parents and which are children.
            Then it can compare the list of root items with the list of parent items and find any which are root items
            but not parents. It will then use the Get-WorkItemDetails function to get all the details of these items
            and return that data to the pipeline.

            The function accepts input from the pipeline in the form of a WebSession object, such as generated by the Connect-TfsServer
            function.

        .PARAMETER IterationPath
            The exact path of the iteration to look up, such as 'test\Sprint 1'

        .PARAMETER States
            String of states to query, for multiple states use double quotes around a comma seperated list of single quoted strings.
            Accepted states are: Approved, Committed, Done, In Test, New, Removed

        .EXAMPLE
            Get-TfsWorkItemInIterationWithNoTask -Uri https://test.visualstudio.com/DefaultCollection -Username username@email.com -AccessToken (Get-Content C:\AccessToken.txt) -IterationPath 'Test\Sprint 1' -States 'New'

            This will get all the work items with no tasks in Sprint 1 of the Test project that are in the New state, using the specified credentials and Uri.

        .EXAMPLE
            Get-TfsWorkItemInIterationWithNoTask -WebSession $Session -IterationPath 'Test\Sprint 4' -States "'New','Approved'"
            
            This will get all the work items with no tasks in Sprint 4 of the Test project with the New or Approved state, using the WebSession object for the Uri and credentials.

        .EXAMPLE
            Connect-TfsServer -Uri "https://test.visualstudio.com/DefaultCollection -Username username@email.com -AccessToken (Get-Content C:\AccessToken.txt) |  Get-TfsWorkItemInIterationWithNoTask -IterationPath 'Test\Sprint 4' -States "'New','Approved'"
            
            This will connect to the specified TFS server and then pass the WebSession object into the pipeline and get all the work items with no tasks in Sprint 4 of the Test project with the New or Approved state.
    #>
    [cmdletbinding()]
    param
    (
        [Parameter(Mandatory)]
        [String]$IterationPath,

        [Parameter(Mandatory)]
        [String]$States

    )
    Process
    {
        $headers = @{'Content-Type'='application/json'}
        $Parameters = @{}
        $Parameters.add('WebSession',$WebSession)
        $Parameters.add('Headers',$headers)   

        write-verbose "Getting Backlog Items under $iterationpath via $uri that have no child tasks" 

        $queryuri = "$($uri)/_apis/wit/wiql?api-version=1.0"
        $wiq = "SELECT [System.Id], [System.Links.LinkType], [System.WorkItemType], [System.Title], [System.AssignedTo], [System.State], [System.Tags] FROM WorkItemLinks WHERE (  [Source].[System.State] IN ($states)  AND  [Source].[System.IterationPath] UNDER '$iterationpath') And ([System.Links.LinkType] <> '') And ([Target].[System.WorkItemType] = 'Task') ORDER BY [System.Id] mode(MayContain)"
        $data = @{query = $wiq } | ConvertTo-Json

        $Parameters.add('Uri', $queryUri)

        try
        {
            $jsondata = Invoke-RestMethod @parameters -Method Post -Body $data   #$wc.UploadString($uri,'POST', $data) | ConvertFrom-Json 
        }
        catch
        {
            Throw
        }
    
        # work out which root items have no child tasks
        # might be a better way to do this
        $rootItems = @()
        $childItems = @()
        $parentItems = @()
    
        foreach($wi in $jsondata.workItemRelations)
        {
            if ($wi.rel -eq $null)
            {
                $rootItems += $wi.target.id
            } else 
            {
                $childItems += $wi.target.id
                $parentItems += $wi.source.id
            }
        }

        $ids = (Compare-Object -ReferenceObject ($rootItems |  Sort-Object) -DifferenceObject ($parentItems | Select-Object -uniq |  Sort-Object)).InputObject
        $retItems = @()

        foreach ($id in $ids)
        {
            if ($WebSession)
            {
                $item = Get-TfsWorkItemDetail -WebSession $WebSession -id $id
            }
            else
            {
                $item = Get-TfsWorkItemDetail -uri $uri -id $id -username $username -password $password
            }
            $retItems += $item | Select-Object id, @{ Name = 'WIT' ;Expression ={$_.fields.'System.WorkItemType'}} , @{ Name = 'Title' ;Expression ={$_.fields.'System.Title'}}

        }
    
        Write-Output $retItems
    }
}